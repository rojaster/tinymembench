tinymembench v0.4.10 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   7990.3 MB/s (0.6%)
 C copy backwards (32 byte blocks)                    :   7970.9 MB/s (1.6%)
 C copy backwards (64 byte blocks)                    :   7989.0 MB/s (0.6%)
 C copy                                               :   8403.0 MB/s (0.9%)
 C copy prefetched (32 bytes step)                    :   8794.1 MB/s (0.7%)
 C copy prefetched (64 bytes step)                    :   8803.3 MB/s (2.0%)
 C 2-pass copy                                        :   6679.3 MB/s (0.6%)
 C 2-pass copy prefetched (32 bytes step)             :   7165.3 MB/s (0.8%)
 C 2-pass copy prefetched (64 bytes step)             :   7197.9 MB/s (0.7%)
 C fill                                               :  14466.2 MB/s (1.0%)
 C fill (shuffle within 16 byte blocks)               :  14563.6 MB/s (1.4%)
 C fill (shuffle within 32 byte blocks)               :  14392.5 MB/s (3.5%)
 C fill (shuffle within 64 byte blocks)               :  14573.7 MB/s (1.1%)
 ---
 standard memcpy                                      :   7546.7 MB/s (0.6%)
 standard memset                                      :  28423.6 MB/s (3.6%)
 ---
 MOVSB copy                                           :   7477.8 MB/s (0.8%)
 MOVSD copy                                           :   8450.0 MB/s (4.0%)
 SSE2 copy                                            :   8728.5 MB/s (0.9%)
 SSE2 nontemporal copy                                :  12582.9 MB/s (2.1%)
 SSE2 copy prefetched (32 bytes step)                 :   8868.1 MB/s (0.7%)
 SSE2 copy prefetched (64 bytes step)                 :   8888.3 MB/s (2.9%)
 SSE2 nontemporal copy prefetched (32 bytes step)     :  12880.1 MB/s (5.6%)
 SSE2 nontemporal copy prefetched (64 bytes step)     :  12846.6 MB/s (2.3%)
 SSE2 2-pass copy                                     :   7263.5 MB/s (2.0%)
 SSE2 2-pass copy prefetched (32 bytes step)          :   7824.3 MB/s (2.5%)
 SSE2 2-pass copy prefetched (64 bytes step)          :   7343.6 MB/s (6.4%)
 SSE2 2-pass nontemporal copy                         :   5022.7 MB/s (5.1%)
 SSE2 fill                                            :  14026.3 MB/s (2.2%)
 SSE2 nontemporal fill                                :  32790.4 MB/s (5.5%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    0.8 ns          /     1.1 ns 
    131072 :    1.3 ns          /     1.5 ns 
    262144 :    2.5 ns          /     3.5 ns 
    524288 :    6.2 ns          /     8.0 ns 
   1048576 :    8.5 ns          /    10.0 ns 
   2097152 :    9.8 ns          /    10.9 ns 
   4194304 :   13.9 ns          /    13.4 ns 
   8388608 :   36.5 ns          /    48.5 ns 
  16777216 :   76.9 ns          /    92.1 ns 
  33554432 :   90.7 ns          /    89.5 ns 
  67108864 :  103.9 ns          /   117.0 ns 
